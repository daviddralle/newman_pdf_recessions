sh: latex: command not found
sh: latex: command not found
Traceback (most recent call last):
  File "hpc_newman.py", line 127, in <module>
    main()
  File "hpc_newman.py", line 122, in main
    res = Parallel(n_jobs=23)(delayed(run_newman) (flow_files[i]) for i in range(len(flow_files)))
  File "/global/home/users/dralle/miniconda2/envs/py2k_model/lib/python2.7/site-packages/joblib/parallel.py", line 810, in __call__
    self.retrieve()
  File "/global/home/users/dralle/miniconda2/envs/py2k_model/lib/python2.7/site-packages/joblib/parallel.py", line 757, in retrieve
    raise exception
joblib.my_exceptions.JoblibRuntimeError: JoblibRuntimeError
___________________________________________________________________________
Multiprocessing exception:
...........................................................................
/global/home/users/dralle/newman_pdf_recessions/hpc_newman.py in <module>()
    122     res = Parallel(n_jobs=23)(delayed(run_newman) (flow_files[i]) for i in range(len(flow_files)))
    123     # res = Parallel(n_jobs=4)(delayed(run_newman) (flow_files[i]) for i in [1])
    124     pickle.dump(res, open('./results.p', 'wb'))
    125 
    126 if __name__ == '__main__':
--> 127 	main()
    128 
    129 
    130 
    131 

...........................................................................
/global/home/users/dralle/newman_pdf_recessions/hpc_newman.py in main()
    117     return (A, B, datedict, B_pdf, nu_pdf, MU_E, LAM_H, ALPHA_H, NU_K, NU_K_BSE, MU_KT, MU_T, R2B, R2B_K, A_EVENT, B_EVENT)
    118 
    119 
    120 def main():
    121     flow_files = a_b_functions.getFlowFileList()
--> 122     res = Parallel(n_jobs=23)(delayed(run_newman) (flow_files[i]) for i in range(len(flow_files)))
        res = undefined
    123     # res = Parallel(n_jobs=4)(delayed(run_newman) (flow_files[i]) for i in [1])
    124     pickle.dump(res, open('./results.p', 'wb'))
    125 
    126 if __name__ == '__main__':

...........................................................................
/global/home/users/dralle/miniconda2/envs/py2k_model/lib/python2.7/site-packages/joblib/parallel.py in __call__(self=Parallel(n_jobs=23), iterable=<generator object <genexpr>>)
    805             if pre_dispatch == "all" or n_jobs == 1:
    806                 # The iterable was consumed all at once by the above for loop.
    807                 # No need to wait for async callbacks to trigger to
    808                 # consumption.
    809                 self._iterating = False
--> 810             self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=23)>
    811             # Make sure that we get a last message telling us we are done
    812             elapsed_time = time.time() - self._start_time
    813             self._print('Done %3i out of %3i | elapsed: %s finished',
    814                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Sub-process traceback:
---------------------------------------------------------------------------
RuntimeError                                       Fri Jun 16 02:13:36 2017
PID: 10672Python 2.7.12: /global/home/users/dralle/miniconda2/envs/py2k_model/bin/python
...........................................................................
/global/home/users/dralle/miniconda2/envs/py2k_model/lib/python2.7/site-packages/joblib/parallel.py in __call__(self=<joblib.parallel.BatchedCalls object>)
     67     def __init__(self, iterator_slice):
     68         self.items = list(iterator_slice)
     69         self._size = len(self.items)
     70 
     71     def __call__(self):
---> 72         return [func(*args, **kwargs) for func, args, kwargs in self.items]
        func = <function run_newman>
        args = ('./usgs_streamflow/15/09535100_streamflow_qc.txt',)
        kwargs = {}
        self.items = [(<function run_newman>, ('./usgs_streamflow/15/09535100_streamflow_qc.txt',), {})]
     73 
     74     def __len__(self):
     75         return self._size
     76 

...........................................................................
/global/home/users/dralle/newman_pdf_recessions/hpc_newman.py in run_newman(fh='./usgs_streamflow/15/09535100_streamflow_qc.txt')
    110         LAM_H[(site, seasons[ind])] = np.mean(arrivals)
    111         ALPHA_H[(site, seasons[ind])] = np.mean(storage_mags)
    112         NU_K[(site, seasons[ind])] = nu_k
    113         NU_K_BSE[(site, seasons[ind])] = nu_k_bse
    114         savestr = site + '_' + seasons[ind] + '.pdf'
--> 115         fig.savefig('./plots/'+savestr)
        fig.savefig = <bound method Figure.savefig of <matplotlib.figure.Figure object>>
        savestr = '09535100_spring.pdf'
    116 
    117     return (A, B, datedict, B_pdf, nu_pdf, MU_E, LAM_H, ALPHA_H, NU_K, NU_K_BSE, MU_KT, MU_T, R2B, R2B_K, A_EVENT, B_EVENT)
    118 
    119 

...........................................................................
/global/home/users/dralle/miniconda2/envs/py2k_model/lib/python2.7/site-packages/matplotlib/figure.py in savefig(self=<matplotlib.figure.Figure object>, *args=('./plots/09535100_spring.pdf',), **kwargs={u'dpi': 100.0, u'edgecolor': u'w', u'facecolor': u'w'})
   1558 
   1559         if frameon:
   1560             original_frameon = self.get_frameon()
   1561             self.set_frameon(frameon)
   1562 
-> 1563         self.canvas.print_figure(*args, **kwargs)
        self.canvas.print_figure = <bound method FigureCanvasAgg.print_figure of <m...lib.backends.backend_agg.FigureCanvasAgg object>>
        args = ('./plots/09535100_spring.pdf',)
        kwargs = {u'dpi': 100.0, u'edgecolor': u'w', u'facecolor': u'w'}
   1564 
   1565         if frameon:
   1566             self.set_frameon(original_frameon)
   1567 

...........................................................................
/global/home/users/dralle/miniconda2/envs/py2k_model/lib/python2.7/site-packages/matplotlib/backend_bases.py in print_figure(self=<matplotlib.backends.backend_agg.FigureCanvasAgg object>, filename='./plots/09535100_spring.pdf', dpi=100.0, facecolor=u'w', edgecolor=u'w', orientation=u'portrait', format='pdf', **kwargs={})
   2227                 dpi=dpi,
   2228                 facecolor=facecolor,
   2229                 edgecolor=edgecolor,
   2230                 orientation=orientation,
   2231                 bbox_inches_restore=_bbox_inches_restore,
-> 2232                 **kwargs)
        kwargs = {}
   2233         finally:
   2234             if bbox_inches and restore_bbox:
   2235                 restore_bbox()
   2236 

...........................................................................
/global/home/users/dralle/miniconda2/envs/py2k_model/lib/python2.7/site-packages/matplotlib/backends/backend_pdf.py in print_pdf(self=<matplotlib.backends.backend_pdf.FigureCanvasPdf object>, filename='./plots/09535100_spring.pdf', **kwargs={'dpi': 100.0, 'edgecolor': u'w', 'facecolor': u'w', 'orientation': u'portrait'})
   2531             _bbox_inches_restore = kwargs.pop("bbox_inches_restore", None)
   2532             renderer = MixedModeRenderer(
   2533                 self.figure, width, height, image_dpi,
   2534                 RendererPdf(file, image_dpi),
   2535                 bbox_inches_restore=_bbox_inches_restore)
-> 2536             self.figure.draw(renderer)
        self.figure.draw = <bound method Figure.draw of <matplotlib.figure.Figure object>>
        renderer = <matplotlib.backends.backend_mixed.MixedModeRenderer object>
   2537             renderer.finalize()
   2538         finally:
   2539             if isinstance(filename, PdfPages):  # finish off this page
   2540                 file.endStream()

...........................................................................
/global/home/users/dralle/miniconda2/envs/py2k_model/lib/python2.7/site-packages/matplotlib/artist.py in draw_wrapper(artist=<matplotlib.figure.Figure object>, renderer=<matplotlib.backends.backend_mixed.MixedModeRenderer object>, *args=(), **kwargs={})
     57             renderer.stop_rasterizing()
     58 
     59     # the axes class has a second argument inframe for its draw method.
     60     def draw_wrapper(artist, renderer, *args, **kwargs):
     61         before(artist, renderer)
---> 62         draw(artist, renderer, *args, **kwargs)
        artist = <matplotlib.figure.Figure object>
        renderer = <matplotlib.backends.backend_mixed.MixedModeRenderer object>
        args = ()
        kwargs = {}
     63         after(artist, renderer)
     64 
     65     # "safe wrapping" to exactly replicate anything we haven't overridden above
     66     draw_wrapper.__name__ = draw.__name__

...........................................................................
/global/home/users/dralle/miniconda2/envs/py2k_model/lib/python2.7/site-packages/matplotlib/figure.py in draw(self=<matplotlib.figure.Figure object>, renderer=<matplotlib.backends.backend_mixed.MixedModeRenderer object>)
   1154             dsu.append((a.get_zorder(), a, a.draw, [renderer]))
   1155 
   1156         dsu = [row for row in dsu if not row[1].get_animated()]
   1157         dsu.sort(key=itemgetter(0))
   1158         for zorder, a, func, args in dsu:
-> 1159             func(*args)
        func = <bound method AxesSubplot.draw of <matplotlib.axes._subplots.AxesSubplot object>>
        args = [<matplotlib.backends.backend_mixed.MixedModeRenderer object>]
   1160 
   1161         renderer.close_group('figure')
   1162         self.stale = False
   1163 

...........................................................................
/global/home/users/dralle/miniconda2/envs/py2k_model/lib/python2.7/site-packages/matplotlib/artist.py in draw_wrapper(artist=<matplotlib.axes._subplots.AxesSubplot object>, renderer=<matplotlib.backends.backend_mixed.MixedModeRenderer object>, *args=(), **kwargs={})
     57             renderer.stop_rasterizing()
     58 
     59     # the axes class has a second argument inframe for its draw method.
     60     def draw_wrapper(artist, renderer, *args, **kwargs):
     61         before(artist, renderer)
---> 62         draw(artist, renderer, *args, **kwargs)
        artist = <matplotlib.axes._subplots.AxesSubplot object>
        renderer = <matplotlib.backends.backend_mixed.MixedModeRenderer object>
        args = ()
        kwargs = {}
     63         after(artist, renderer)
     64 
     65     # "safe wrapping" to exactly replicate anything we haven't overridden above
     66     draw_wrapper.__name__ = draw.__name__

...........................................................................
/global/home/users/dralle/miniconda2/envs/py2k_model/lib/python2.7/site-packages/matplotlib/axes/_base.py in draw(self=<matplotlib.axes._subplots.AxesSubplot object>, renderer=<matplotlib.backends.backend_mixed.MixedModeRenderer object>, inframe=False)
   2314             for zorder, a in dsu_rasterized:
   2315                 a.draw(renderer)
   2316             renderer.stop_rasterizing()
   2317 
   2318         for zorder, a in dsu:
-> 2319             a.draw(renderer)
        a.draw = <bound method XAxis.draw of <matplotlib.axis.XAxis object>>
        renderer = <matplotlib.backends.backend_mixed.MixedModeRenderer object>
   2320 
   2321         renderer.close_group('axes')
   2322         self._cachedRenderer = renderer
   2323         self.stale = False

...........................................................................
/global/home/users/dralle/miniconda2/envs/py2k_model/lib/python2.7/site-packages/matplotlib/artist.py in draw_wrapper(artist=<matplotlib.axis.XAxis object>, renderer=<matplotlib.backends.backend_mixed.MixedModeRenderer object>, *args=(), **kwargs={})
     57             renderer.stop_rasterizing()
     58 
     59     # the axes class has a second argument inframe for its draw method.
     60     def draw_wrapper(artist, renderer, *args, **kwargs):
     61         before(artist, renderer)
---> 62         draw(artist, renderer, *args, **kwargs)
        artist = <matplotlib.axis.XAxis object>
        renderer = <matplotlib.backends.backend_mixed.MixedModeRenderer object>
        args = ()
        kwargs = {}
     63         after(artist, renderer)
     64 
     65     # "safe wrapping" to exactly replicate anything we haven't overridden above
     66     draw_wrapper.__name__ = draw.__name__

...........................................................................
/global/home/users/dralle/miniconda2/envs/py2k_model/lib/python2.7/site-packages/matplotlib/axis.py in draw(self=<matplotlib.axis.XAxis object>, renderer=<matplotlib.backends.backend_mixed.MixedModeRenderer object>, *args=(), **kwargs={})
   1105             return
   1106         renderer.open_group(__name__)
   1107 
   1108         ticks_to_draw = self._update_ticks(renderer)
   1109         ticklabelBoxes, ticklabelBoxes2 = self._get_tick_bboxes(ticks_to_draw,
-> 1110                                                                 renderer)
        renderer = <matplotlib.backends.backend_mixed.MixedModeRenderer object>
   1111 
   1112         for tick in ticks_to_draw:
   1113             tick.draw(renderer)
   1114 

...........................................................................
/global/home/users/dralle/miniconda2/envs/py2k_model/lib/python2.7/site-packages/matplotlib/axis.py in _get_tick_bboxes(self=<matplotlib.axis.XAxis object>, ticks=[<matplotlib.axis.XTick object>, <matplotlib.axis.XTick object>, <matplotlib.axis.XTick object>, <matplotlib.axis.XTick object>, <matplotlib.axis.XTick object>, <matplotlib.axis.XTick object>, <matplotlib.axis.XTick object>, <matplotlib.axis.XTick object>, <matplotlib.axis.XTick object>], renderer=<matplotlib.backends.backend_mixed.MixedModeRenderer object>)
   1055         ticklabelBoxes = []
   1056         ticklabelBoxes2 = []
   1057 
   1058         for tick in ticks:
   1059             if tick.label1On and tick.label1.get_visible():
-> 1060                 extent = tick.label1.get_window_extent(renderer)
        extent = undefined
        tick.label1.get_window_extent = <bound method Text.get_window_extent of <matplotlib.text.Text object>>
        renderer = <matplotlib.backends.backend_mixed.MixedModeRenderer object>
   1061                 ticklabelBoxes.append(extent)
   1062             if tick.label2On and tick.label2.get_visible():
   1063                 extent = tick.label2.get_window_extent(renderer)
   1064                 ticklabelBoxes2.append(extent)

...........................................................................
/global/home/users/dralle/miniconda2/envs/py2k_model/lib/python2.7/site-packages/matplotlib/text.py in get_window_extent(self=<matplotlib.text.Text object>, renderer=<matplotlib.backends.backend_mixed.MixedModeRenderer object>, dpi=None)
    956         if renderer is not None:
    957             self._renderer = renderer
    958         if self._renderer is None:
    959             raise RuntimeError('Cannot get window extent w/o renderer')
    960 
--> 961         bbox, info, descent = self._get_layout(self._renderer)
        bbox = undefined
        info = undefined
        descent = undefined
        self._get_layout = <bound method Text._get_layout of <matplotlib.text.Text object>>
        self._renderer = <matplotlib.backends.backend_mixed.MixedModeRenderer object>
    962         x, y = self.get_unitless_position()
    963         x, y = self.get_transform().transform_point((x, y))
    964         bbox = bbox.translated(x, y)
    965         if dpi is not None:

...........................................................................
/global/home/users/dralle/miniconda2/envs/py2k_model/lib/python2.7/site-packages/matplotlib/text.py in _get_layout(self=<matplotlib.text.Text object>, renderer=<matplotlib.backends.backend_mixed.MixedModeRenderer object>)
    347 
    348         # Find full vertical extent of font,
    349         # including ascenders and descenders:
    350         tmp, lp_h, lp_bl = renderer.get_text_width_height_descent('lp',
    351                                                          self._fontproperties,
--> 352                                                          ismath=False)
        ismath = undefined
    353         offsety = (lp_h - lp_bl) * self._linespacing
    354 
    355         baseline = 0
    356         for i, line in enumerate(lines):

...........................................................................
/global/home/users/dralle/miniconda2/envs/py2k_model/lib/python2.7/site-packages/matplotlib/backends/backend_pdf.py in get_text_width_height_descent(self=<matplotlib.backends.backend_pdf.RendererPdf object>, s=u'lp', prop=<matplotlib.font_manager.FontProperties object>, ismath=False)
   2081     def get_text_width_height_descent(self, s, prop, ismath):
   2082         if rcParams['text.usetex']:
   2083             texmanager = self.get_texmanager()
   2084             fontsize = prop.get_size_in_points()
   2085             w, h, d = texmanager.get_text_width_height_descent(s, fontsize,
-> 2086                                                                renderer=self)
        self = <matplotlib.backends.backend_pdf.RendererPdf object>
   2087             return w, h, d
   2088 
   2089         if ismath:
   2090             w, h, d, glyphs, rects, used_characters = \

...........................................................................
/global/home/users/dralle/miniconda2/envs/py2k_model/lib/python2.7/site-packages/matplotlib/texmanager.py in get_text_width_height_descent(self=<matplotlib.texmanager.TexManager object>, tex=u'lp', fontsize=10.0, renderer=<matplotlib.backends.backend_pdf.RendererPdf object>)
    670             height, depth, width = [float(l1) * dpi_fraction for l1 in l]
    671             return width, height + depth, depth
    672 
    673         else:
    674             # use dviread. It sometimes returns a wrong descent.
--> 675             dvifile = self.make_dvi(tex, fontsize)
        dvifile = undefined
        self.make_dvi = <bound method TexManager.make_dvi of <matplotlib.texmanager.TexManager object>>
        tex = u'lp'
        fontsize = 10.0
    676             dvi = dviread.Dvi(dvifile, 72 * dpi_fraction)
    677             try:
    678                 page = next(iter(dvi))
    679             finally:

...........................................................................
/global/home/users/dralle/miniconda2/envs/py2k_model/lib/python2.7/site-packages/matplotlib/texmanager.py in make_dvi(self=<matplotlib.texmanager.TexManager object>, tex=u'lp', fontsize=10.0)
    417             if exit_status or not exists:
    418                 raise RuntimeError(
    419                     ('LaTeX was not able to process the following '
    420                      'string:\n%s\nHere is the full report generated by '
    421                      'LaTeX: \n\n' % repr(tex.encode('unicode_escape')) +
--> 422                      report))
        report = ''
    423             else:
    424                 mpl.verbose.report(report, 'debug')
    425             for fname in glob.glob(basefile + '*'):
    426                 if fname.endswith('dvi'):

RuntimeError: LaTeX was not able to process the following string:
'lp'
Here is the full report generated by LaTeX: 


___________________________________________________________________________
